// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    imageUrl      String?
    accounts      Account[]
    sessions      Session[]

    clerkUserId String @unique

    points           Int               @default(0)
    choreCompletions ChoreCompletion[]

    home   Home?   @relation(fields: [homeId], references: [id])
    homeId String?

    @@index([homeId])
    @@index([clerkUserId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    content  String @db.VarChar(255)
    authorId String

    @@index([authorId])
}

model Home {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    users     User[]
    chores    Chore[]
}

model Chore {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    displayName        String
    description        String
    points             Int
    repeatAfterMinutes Int

    deadline DateTime

    home   Home   @relation(fields: [homeId], references: [id])
    homeId String

    choreCompletions ChoreCompletion[]

    @@index([homeId])
}

model ChoreCompletion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    chore   Chore  @relation(fields: [choreId], references: [id])
    choreId String

    points Int

    completedByUser   User   @relation(fields: [completedByUserId], references: [id])
    completedByUserId String

    @@index([completedByUserId])
    @@index([choreId])
}
